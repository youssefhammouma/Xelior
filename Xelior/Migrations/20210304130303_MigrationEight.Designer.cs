// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Xelior.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20210304130303_MigrationEight")]
    partial class MigrationEight
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Xelior.Models.ExigenceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("JalonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("JalonId");

                    b.ToTable("ExigenceItem");
                });

            modelBuilder.Entity("Xelior.Models.JalonItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PlannedStartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("ProjectItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RealEndDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("ProjectItemId");

                    b.ToTable("JalonItem");
                });

            modelBuilder.Entity("Xelior.Models.ProjectItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AssignedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.ToTable("ProjectItems");
                });

            modelBuilder.Entity("Xelior.Models.TaskItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AssignedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("ExigencesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("JalonItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PlannedStartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RealStartDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("JalonItemId");

                    b.ToTable("TaskItem");
                });

            modelBuilder.Entity("Xelior.Models.TodoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("Xelior.Models.UserItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Trigram")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isChief")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("UserItems");
                });

            modelBuilder.Entity("Xelior.Models.ExigenceItem", b =>
                {
                    b.HasOne("Xelior.Models.JalonItem", null)
                        .WithMany()
                        .HasForeignKey("JalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xelior.Models.JalonItem", b =>
                {
                    b.HasOne("Xelior.Models.UserItem", null)
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xelior.Models.ProjectItem", null)
                        .WithMany("Jalons")
                        .HasForeignKey("ProjectItemId");
                });

            modelBuilder.Entity("Xelior.Models.ProjectItem", b =>
                {
                    b.HasOne("Xelior.Models.UserItem", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("Xelior.Models.TaskItem", b =>
                {
                    b.HasOne("Xelior.Models.UserItem", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("Xelior.Models.JalonItem", null)
                        .WithMany("Tasks")
                        .HasForeignKey("JalonItemId");

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("Xelior.Models.JalonItem", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Xelior.Models.ProjectItem", b =>
                {
                    b.Navigation("Jalons");
                });
#pragma warning restore 612, 618
        }
    }
}
